# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:52:52+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    ClearAddress,
    ClearAddressRequest,
    DeleteAddress,
    DeleteAddressRequest,
    ExportAddress,
    ExportAddressRequest,
    GetBlock,
    GetBlockRequest,
    GetEthereumBalance,
    GetEthereumBalanceRequest,
    GetExchangeRate,
    GetExchangeRateRequest,
    GetGasPrice,
    GetLastBlockNumber,
    GetToken,
    GetTokenBalance,
    GetTokenBalanceRequest,
    GetTokenRequest,
    GetTransactions,
    GetTransactionsRequest,
    ImportAddress,
    ImportAddressRequest,
    ListAddresses,
    ListFailedIPNs,
    ListSubscribedAddresses,
    NewAddress,
    NewAddressRequest,
    ResendFailedIPN,
    ResendFailedIPNRequest,
    SendEthereum,
    SendEthereumRequest,
    SendToken,
    SendTokenRequest,
    SubscribeAddress,
    SubscribeAddressRequest,
    UnsubscribeAddress,
    UnsubscribeAddressRequest,
)

app = MCPProxy(
    contact={},
    description='# Chaingateway.io\n\nREST API to build the bridge between Ethereum and the real world\n\nPlease check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.\n\nTo use our API, you need an API Key (Described as Authorization header in the examples below).\nTo get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).\n\nFor our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).\n\nIf you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.',
    title='Chaingateway.io',
    version='1.0',
    servers=[{'url': 'https://eu.eth.chaingateway.io/v1', 'variables': {}}],
)


@app.post(
    '/clearAddress',
    description=""" Sends all available ethereum funds of an address to a specified receiver address. """,
    tags=['address_management'],
)
def clear_address(
    authorization: str = Header(..., alias='Authorization'),
    body: ClearAddressRequest = ...,
):
    """
    clearAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/deleteAddress',
    description=""" Deletes an existing ethereum address. Be careful when using this function. """,
    tags=['address_management'],
)
def delete_address(
    authorization: str = Header(..., alias='Authorization'),
    body: DeleteAddressRequest = ...,
):
    """
    deleteAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/exportAddress',
    description=""" Returns all ethereum addresses created with an account. """,
    tags=['address_management'],
)
def export_address(
    authorization: str = Header(..., alias='Authorization'),
    body: ExportAddressRequest = ...,
):
    """
    exportAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getBlock',
    description=""" Returns information of an ethereum block with or without transactions """,
    tags=['blockchain_information_retrieval'],
)
def get_block(
    authorization: str = Header(..., alias='Authorization'), body: GetBlockRequest = ...
):
    """
    getBlock
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getEthereumBalance',
    description=""" Returns the ethereum balance of a given address. """,
    tags=['blockchain_information_retrieval'],
)
def get_ethereum_balance(
    authorization: str = Header(..., alias='Authorization'),
    body: GetEthereumBalanceRequest = ...,
):
    """
    getEthereumBalance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getExchangeRate',
    description=""" Returns the current Ethereum price in Euro or US Dollar. """,
    tags=['blockchain_information_retrieval'],
)
def get_exchange_rate(
    authorization: str = Header(..., alias='Authorization'),
    body: GetExchangeRateRequest = ...,
):
    """
    getExchangeRate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getGasPrice',
    description=""" Returns the current gas price in GWEI. """,
    tags=['blockchain_information_retrieval'],
)
def get_gas_price(
    content__type: str = Header(..., alias='Content-Type'),
    authorization: str = Header(..., alias='Authorization'),
):
    """
    getGasPrice
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getLastBlockNumber',
    description=""" Returns the block number of the last mined ethereum block. """,
    tags=['blockchain_information_retrieval'],
)
def get_last_block_number(
    content__type: str = Header(..., alias='Content-Type'),
    authorization: str = Header(..., alias='Authorization'),
):
    """
    getLastBlockNumber
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getToken',
    description=""" Returns information about a specific ERC20 token like name, symbol, decimal places and total supply. """,
    tags=['address_notification_subscription'],
)
def get_token(
    authorization: str = Header(..., alias='Authorization'), body: GetTokenRequest = ...
):
    """
    getToken
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getTokenBalance',
    description=""" Returns the token balance of a given address. """,
    tags=['blockchain_information_retrieval'],
)
def get_token_balance(
    authorization: str = Header(..., alias='Authorization'),
    body: GetTokenBalanceRequest = ...,
):
    """
    getTokenBalance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getTransactions',
    description=""" Returns information like confirmations, token contract address, amount, gas price and more of a given transaction. """,
    tags=['transaction_handling'],
)
def get_transactions(
    authorization: str = Header(..., alias='Authorization'),
    body: GetTransactionsRequest = ...,
):
    """
    getTransactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/importAddress',
    description=""" Returns all ethereum addresses created with an account. """,
    tags=['address_management'],
)
def import_address(
    authorization: str = Header(..., alias='Authorization'),
    body: ImportAddressRequest = ...,
):
    """
    importAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listAddresses',
    description=""" Returns all ethereum addresses created with an account. """,
    tags=['address_management'],
)
def list_addresses(
    content__type: str = Header(..., alias='Content-Type'),
    authorization: str = Header(..., alias='Authorization'),
):
    """
    listAddresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listFailedIPNs',
    description=""" Returns all subscriptions/IPNs created with an account. """,
    tags=['ipn_tracking'],
)
def list_failed_i_p_ns(
    content__type: str = Header(..., alias='Content-Type'),
    authorization: str = Header(..., alias='Authorization'),
):
    """
    listFailedIPNs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listSubscribedAddresses',
    description=""" Returns all subscriptions/IPNs created with an account. """,
    tags=['address_management', 'address_notification_subscription'],
)
def list_subscribed_addresses(
    content__type: str = Header(..., alias='Content-Type'),
    authorization: str = Header(..., alias='Authorization'),
):
    """
    listSubscribedAddresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/newAddress',
    description=""" Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can't restore access to an address if you lose it. """,
    tags=['address_management'],
)
def new_address(
    authorization: str = Header(..., alias='Authorization'),
    body: NewAddressRequest = ...,
):
    """
    newAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/resendFailedIPN',
    description=""" Returns all subscriptions/IPNs created with an account. """,
    tags=['ipn_tracking'],
)
def resend_failed_i_p_n(
    authorization: str = Header(..., alias='Authorization'),
    body: ResendFailedIPNRequest = ...,
):
    """
    resendFailedIPN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sendEthereum',
    description=""" Sends ethereum from an address controlled by the account to a specified receiver address. """,
    tags=['transaction_handling'],
)
def send_ethereum(
    authorization: str = Header(..., alias='Authorization'),
    body: SendEthereumRequest = ...,
):
    """
    sendEthereum
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sendToken',
    description=""" Sends ERC20 tokens from an address controlled by the account to a specified receiver address. The token contract address is needed to specify the token. The use of the identifier parameter is recommend and awaits an unique string. Whenever a transaction is beeing sent, the identifier is checked and the transaction gets dropped if there is one with that identifier already. """,
    tags=['transaction_handling'],
)
def send_token(
    authorization: str = Header(..., alias='Authorization'),
    body: SendTokenRequest = ...,
):
    """
    sendToken
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subscribeAddress',
    description=""" Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
 """,
    tags=['address_management', 'address_notification_subscription'],
)
def subscribe_address(
    authorization: str = Header(..., alias='Authorization'),
    body: SubscribeAddressRequest = ...,
):
    """
    subscribeAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/unsubscribeAddress',
    description=""" Deletes an existing subscription/IPN for the given address (and contractaddress). """,
    tags=['address_notification_subscription', 'address_management'],
)
def unsubscribe_address(
    authorization: str = Header(..., alias='Authorization'),
    body: UnsubscribeAddressRequest = ...,
):
    """
    unsubscribeAddress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
