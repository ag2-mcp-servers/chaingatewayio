# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:52:52+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Address(BaseModel):
    ethereumaddress: str


class Cipherparams(BaseModel):
    iv: str


class FailedIpn(BaseModel):
    action: str
    amount: str
    contractaddress: str
    ethereumaddress: str
    id: str
    timestamp: str
    url: str


class Ipn(BaseModel):
    contractaddress: str
    ethereumaddress: str
    url: str


class Kdfparams(BaseModel):
    dklen: int
    n: int
    p: int
    r: int
    salt: str


class Transaction(BaseModel):
    amount: str
    block_number: str
    contract_address: str
    from_: str = Field(..., alias='from')
    gas: str
    gas_price: str
    to: str
    token_decimals: str
    token_name: str
    token_supply: str
    token_symbol: str
    txid: str
    type: str


class ClearAddress(BaseModel):
    amount: float
    ethereumaddress: str
    gas: float
    newaddress: str
    ok: bool
    total: str
    txid: str


class ClearAddressRequest(BaseModel):
    ethereumaddress: str
    newaddress: str
    password: str


class DeleteAddress(BaseModel):
    deleted: bool
    ethereumaddress: str
    ok: bool


class DeleteAddressRequest(BaseModel):
    ethereumaddress: str
    password: str


class ExportAddress(BaseModel):
    content: str
    filename: str
    ok: bool


class ExportAddressRequest(BaseModel):
    ethaddress: str
    password: str


class GetBlock(BaseModel):
    block_number: str
    difficulty: str
    gas_limit: str
    gas_used: str
    hash: str
    miner: str
    ok: bool
    parent_hash: str
    size_in_bytes: str
    time_stamp: str
    transactions_count: str


class GetBlockRequest(BaseModel):
    block: str


class GetEthereumBalance(BaseModel):
    balance: float
    ethereumaddress: str
    ok: bool


class GetEthereumBalanceRequest(BaseModel):
    ethereumaddress: str


class GetExchangeRate(BaseModel):
    currency: str
    ok: bool
    rate: float


class GetExchangeRateRequest(BaseModel):
    currency: str


class GetGasPrice(BaseModel):
    gasprice: int
    ok: bool


class GetLastBlockNumber(BaseModel):
    blocknumber: int
    ok: bool


class GetToken(BaseModel):
    contractaddress: str
    decimals: int
    name: str
    ok: bool
    supply: int
    symbol: str


class GetTokenBalance(BaseModel):
    balance: int
    contractaddress: str
    ethereumaddress: str
    ok: bool


class GetTokenBalanceRequest(BaseModel):
    contractaddress: str
    ethereumaddress: str


class GetTokenRequest(BaseModel):
    contractaddress: str


class GetTransactions(BaseModel):
    ok: bool
    transactions: List[Transaction]


class GetTransactionsRequest(BaseModel):
    txid: str


class ImportAddress(BaseModel):
    ethaddress: str
    filename: str
    ok: bool


class ListAddresses(BaseModel):
    addresses: List[Address]
    ok: bool


class ListFailedIPNs(BaseModel):
    failed_ipns: List[FailedIpn]
    ok: bool


class ListSubscribedAddresses(BaseModel):
    ipns: List[Ipn]
    ok: bool


class NewAddress(BaseModel):
    ethereumaddress: str
    ok: bool
    password: str


class NewAddressRequest(BaseModel):
    password: str


class ResendFailedIPN(BaseModel):
    id: int
    ok: bool


class ResendFailedIPNRequest(BaseModel):
    id: int


class SendEthereum(BaseModel):
    amount: str
    from_: str = Field(..., alias='from')
    ok: bool
    to: str
    txid: str


class SendEthereumRequest(BaseModel):
    amount: float
    from_: str = Field(..., alias='from')
    password: str
    to: str


class SendToken(BaseModel):
    amount: int
    contractaddress: str
    from_: str = Field(..., alias='from')
    identifier: str
    ok: bool
    to: str
    txid: str


class SendTokenRequest(BaseModel):
    amount: int
    contractaddress: str
    from_: str = Field(..., alias='from')
    identifier: str
    password: str
    to: str


class SubscribeAddress(BaseModel):
    contractaddress: str
    ethereumaddress: str
    ok: bool
    url: str


class SubscribeAddressRequest(BaseModel):
    contractaddress: str
    ethereumaddress: str
    url: str


class UnsubscribeAddress(BaseModel):
    contractaddress: str
    deleted: bool
    ethereumaddress: str
    ok: bool
    url: str


class UnsubscribeAddressRequest(BaseModel):
    contractaddress: str
    ethereumaddress: str
    url: str


class Crypto(BaseModel):
    cipher: str
    cipherparams: Cipherparams
    ciphertext: str
    kdf: str
    kdfparams: Kdfparams
    mac: str


class Content(BaseModel):
    address: str
    crypto: Crypto
    id: str
    version: int


class ImportAddressRequest(BaseModel):
    content: Content
    filename: str
    password: str
